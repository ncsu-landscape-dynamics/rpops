// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/PoPS.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pops_model_cpp
List pops_model_cpp(int random_seed, bool multiple_random_seeds, std::vector<int> random_seeds, double lethal_temperature, int lethal_temperature_month, std::vector<List> host_pools, IntegerMatrix total_populations, std::vector<std::vector<double>> competency_table, std::vector<std::vector<double>> pest_host_table, IntegerMatrix quarantine_areas, std::string quarantine_directions, std::vector<NumericMatrix> treatment_maps, std::vector<std::string> treatment_dates, std::vector<int> pesticide_duration, std::vector<std::vector<int>> movements, std::vector<std::string> movements_dates, std::vector<NumericMatrix> temperature, std::vector<NumericMatrix> survival_rates, std::vector<NumericMatrix> weather_coefficient, std::vector<NumericMatrix> weather_coefficient_sd, List bbox, List res, List rows_cols, std::vector<IntegerMatrix> soil_reservoirs, double reproductive_rate, std::vector<std::vector<int>> spatial_indices, List season_month_start_end, List frequency_config, List bool_config, std::string start_date, std::string end_date, std::string treatment_method, std::string natural_kernel_type, std::string anthropogenic_kernel_type, double percent_natural_dispersal, double natural_distance_scale, double anthropogenic_distance_scale, std::string natural_dir, double natural_kappa, std::string anthropogenic_dir, double anthropogenic_kappa, Nullable<List> frequencies_n_config, std::string model_type_, int latency_period, double establishment_probability, double dispersal_percentage, int survival_rate_month, int survival_rate_day, Nullable<List> overpopulation_config, Nullable<List> network_config, Nullable<List> network_data_config, int weather_size, std::string weather_type, double dispersers_to_soils_percentage);
static SEXP _PoPS_pops_model_cpp_try(SEXP random_seedSEXP, SEXP multiple_random_seedsSEXP, SEXP random_seedsSEXP, SEXP lethal_temperatureSEXP, SEXP lethal_temperature_monthSEXP, SEXP host_poolsSEXP, SEXP total_populationsSEXP, SEXP competency_tableSEXP, SEXP pest_host_tableSEXP, SEXP quarantine_areasSEXP, SEXP quarantine_directionsSEXP, SEXP treatment_mapsSEXP, SEXP treatment_datesSEXP, SEXP pesticide_durationSEXP, SEXP movementsSEXP, SEXP movements_datesSEXP, SEXP temperatureSEXP, SEXP survival_ratesSEXP, SEXP weather_coefficientSEXP, SEXP weather_coefficient_sdSEXP, SEXP bboxSEXP, SEXP resSEXP, SEXP rows_colsSEXP, SEXP soil_reservoirsSEXP, SEXP reproductive_rateSEXP, SEXP spatial_indicesSEXP, SEXP season_month_start_endSEXP, SEXP frequency_configSEXP, SEXP bool_configSEXP, SEXP start_dateSEXP, SEXP end_dateSEXP, SEXP treatment_methodSEXP, SEXP natural_kernel_typeSEXP, SEXP anthropogenic_kernel_typeSEXP, SEXP percent_natural_dispersalSEXP, SEXP natural_distance_scaleSEXP, SEXP anthropogenic_distance_scaleSEXP, SEXP natural_dirSEXP, SEXP natural_kappaSEXP, SEXP anthropogenic_dirSEXP, SEXP anthropogenic_kappaSEXP, SEXP frequencies_n_configSEXP, SEXP model_type_SEXP, SEXP latency_periodSEXP, SEXP establishment_probabilitySEXP, SEXP dispersal_percentageSEXP, SEXP survival_rate_monthSEXP, SEXP survival_rate_daySEXP, SEXP overpopulation_configSEXP, SEXP network_configSEXP, SEXP network_data_configSEXP, SEXP weather_sizeSEXP, SEXP weather_typeSEXP, SEXP dispersers_to_soils_percentageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type random_seed(random_seedSEXP);
    Rcpp::traits::input_parameter< bool >::type multiple_random_seeds(multiple_random_seedsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type random_seeds(random_seedsSEXP);
    Rcpp::traits::input_parameter< double >::type lethal_temperature(lethal_temperatureSEXP);
    Rcpp::traits::input_parameter< int >::type lethal_temperature_month(lethal_temperature_monthSEXP);
    Rcpp::traits::input_parameter< std::vector<List> >::type host_pools(host_poolsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type total_populations(total_populationsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type competency_table(competency_tableSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type pest_host_table(pest_host_tableSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type quarantine_areas(quarantine_areasSEXP);
    Rcpp::traits::input_parameter< std::string >::type quarantine_directions(quarantine_directionsSEXP);
    Rcpp::traits::input_parameter< std::vector<NumericMatrix> >::type treatment_maps(treatment_mapsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type treatment_dates(treatment_datesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type pesticide_duration(pesticide_durationSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type movements(movementsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type movements_dates(movements_datesSEXP);
    Rcpp::traits::input_parameter< std::vector<NumericMatrix> >::type temperature(temperatureSEXP);
    Rcpp::traits::input_parameter< std::vector<NumericMatrix> >::type survival_rates(survival_ratesSEXP);
    Rcpp::traits::input_parameter< std::vector<NumericMatrix> >::type weather_coefficient(weather_coefficientSEXP);
    Rcpp::traits::input_parameter< std::vector<NumericMatrix> >::type weather_coefficient_sd(weather_coefficient_sdSEXP);
    Rcpp::traits::input_parameter< List >::type bbox(bboxSEXP);
    Rcpp::traits::input_parameter< List >::type res(resSEXP);
    Rcpp::traits::input_parameter< List >::type rows_cols(rows_colsSEXP);
    Rcpp::traits::input_parameter< std::vector<IntegerMatrix> >::type soil_reservoirs(soil_reservoirsSEXP);
    Rcpp::traits::input_parameter< double >::type reproductive_rate(reproductive_rateSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type spatial_indices(spatial_indicesSEXP);
    Rcpp::traits::input_parameter< List >::type season_month_start_end(season_month_start_endSEXP);
    Rcpp::traits::input_parameter< List >::type frequency_config(frequency_configSEXP);
    Rcpp::traits::input_parameter< List >::type bool_config(bool_configSEXP);
    Rcpp::traits::input_parameter< std::string >::type start_date(start_dateSEXP);
    Rcpp::traits::input_parameter< std::string >::type end_date(end_dateSEXP);
    Rcpp::traits::input_parameter< std::string >::type treatment_method(treatment_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type natural_kernel_type(natural_kernel_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type anthropogenic_kernel_type(anthropogenic_kernel_typeSEXP);
    Rcpp::traits::input_parameter< double >::type percent_natural_dispersal(percent_natural_dispersalSEXP);
    Rcpp::traits::input_parameter< double >::type natural_distance_scale(natural_distance_scaleSEXP);
    Rcpp::traits::input_parameter< double >::type anthropogenic_distance_scale(anthropogenic_distance_scaleSEXP);
    Rcpp::traits::input_parameter< std::string >::type natural_dir(natural_dirSEXP);
    Rcpp::traits::input_parameter< double >::type natural_kappa(natural_kappaSEXP);
    Rcpp::traits::input_parameter< std::string >::type anthropogenic_dir(anthropogenic_dirSEXP);
    Rcpp::traits::input_parameter< double >::type anthropogenic_kappa(anthropogenic_kappaSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type frequencies_n_config(frequencies_n_configSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type_(model_type_SEXP);
    Rcpp::traits::input_parameter< int >::type latency_period(latency_periodSEXP);
    Rcpp::traits::input_parameter< double >::type establishment_probability(establishment_probabilitySEXP);
    Rcpp::traits::input_parameter< double >::type dispersal_percentage(dispersal_percentageSEXP);
    Rcpp::traits::input_parameter< int >::type survival_rate_month(survival_rate_monthSEXP);
    Rcpp::traits::input_parameter< int >::type survival_rate_day(survival_rate_daySEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type overpopulation_config(overpopulation_configSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type network_config(network_configSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type network_data_config(network_data_configSEXP);
    Rcpp::traits::input_parameter< int >::type weather_size(weather_sizeSEXP);
    Rcpp::traits::input_parameter< std::string >::type weather_type(weather_typeSEXP);
    Rcpp::traits::input_parameter< double >::type dispersers_to_soils_percentage(dispersers_to_soils_percentageSEXP);
    rcpp_result_gen = Rcpp::wrap(pops_model_cpp(random_seed, multiple_random_seeds, random_seeds, lethal_temperature, lethal_temperature_month, host_pools, total_populations, competency_table, pest_host_table, quarantine_areas, quarantine_directions, treatment_maps, treatment_dates, pesticide_duration, movements, movements_dates, temperature, survival_rates, weather_coefficient, weather_coefficient_sd, bbox, res, rows_cols, soil_reservoirs, reproductive_rate, spatial_indices, season_month_start_end, frequency_config, bool_config, start_date, end_date, treatment_method, natural_kernel_type, anthropogenic_kernel_type, percent_natural_dispersal, natural_distance_scale, anthropogenic_distance_scale, natural_dir, natural_kappa, anthropogenic_dir, anthropogenic_kappa, frequencies_n_config, model_type_, latency_period, establishment_probability, dispersal_percentage, survival_rate_month, survival_rate_day, overpopulation_config, network_config, network_data_config, weather_size, weather_type, dispersers_to_soils_percentage));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _PoPS_pops_model_cpp(SEXP random_seedSEXP, SEXP multiple_random_seedsSEXP, SEXP random_seedsSEXP, SEXP lethal_temperatureSEXP, SEXP lethal_temperature_monthSEXP, SEXP host_poolsSEXP, SEXP total_populationsSEXP, SEXP competency_tableSEXP, SEXP pest_host_tableSEXP, SEXP quarantine_areasSEXP, SEXP quarantine_directionsSEXP, SEXP treatment_mapsSEXP, SEXP treatment_datesSEXP, SEXP pesticide_durationSEXP, SEXP movementsSEXP, SEXP movements_datesSEXP, SEXP temperatureSEXP, SEXP survival_ratesSEXP, SEXP weather_coefficientSEXP, SEXP weather_coefficient_sdSEXP, SEXP bboxSEXP, SEXP resSEXP, SEXP rows_colsSEXP, SEXP soil_reservoirsSEXP, SEXP reproductive_rateSEXP, SEXP spatial_indicesSEXP, SEXP season_month_start_endSEXP, SEXP frequency_configSEXP, SEXP bool_configSEXP, SEXP start_dateSEXP, SEXP end_dateSEXP, SEXP treatment_methodSEXP, SEXP natural_kernel_typeSEXP, SEXP anthropogenic_kernel_typeSEXP, SEXP percent_natural_dispersalSEXP, SEXP natural_distance_scaleSEXP, SEXP anthropogenic_distance_scaleSEXP, SEXP natural_dirSEXP, SEXP natural_kappaSEXP, SEXP anthropogenic_dirSEXP, SEXP anthropogenic_kappaSEXP, SEXP frequencies_n_configSEXP, SEXP model_type_SEXP, SEXP latency_periodSEXP, SEXP establishment_probabilitySEXP, SEXP dispersal_percentageSEXP, SEXP survival_rate_monthSEXP, SEXP survival_rate_daySEXP, SEXP overpopulation_configSEXP, SEXP network_configSEXP, SEXP network_data_configSEXP, SEXP weather_sizeSEXP, SEXP weather_typeSEXP, SEXP dispersers_to_soils_percentageSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_PoPS_pops_model_cpp_try(random_seedSEXP, multiple_random_seedsSEXP, random_seedsSEXP, lethal_temperatureSEXP, lethal_temperature_monthSEXP, host_poolsSEXP, total_populationsSEXP, competency_tableSEXP, pest_host_tableSEXP, quarantine_areasSEXP, quarantine_directionsSEXP, treatment_mapsSEXP, treatment_datesSEXP, pesticide_durationSEXP, movementsSEXP, movements_datesSEXP, temperatureSEXP, survival_ratesSEXP, weather_coefficientSEXP, weather_coefficient_sdSEXP, bboxSEXP, resSEXP, rows_colsSEXP, soil_reservoirsSEXP, reproductive_rateSEXP, spatial_indicesSEXP, season_month_start_endSEXP, frequency_configSEXP, bool_configSEXP, start_dateSEXP, end_dateSEXP, treatment_methodSEXP, natural_kernel_typeSEXP, anthropogenic_kernel_typeSEXP, percent_natural_dispersalSEXP, natural_distance_scaleSEXP, anthropogenic_distance_scaleSEXP, natural_dirSEXP, natural_kappaSEXP, anthropogenic_dirSEXP, anthropogenic_kappaSEXP, frequencies_n_configSEXP, model_type_SEXP, latency_periodSEXP, establishment_probabilitySEXP, dispersal_percentageSEXP, survival_rate_monthSEXP, survival_rate_daySEXP, overpopulation_configSEXP, network_configSEXP, network_data_configSEXP, weather_sizeSEXP, weather_typeSEXP, dispersers_to_soils_percentageSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _PoPS_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("List(*pops_model_cpp)(int,bool,std::vector<int>,double,int,std::vector<List>,IntegerMatrix,std::vector<std::vector<double>>,std::vector<std::vector<double>>,IntegerMatrix,std::string,std::vector<NumericMatrix>,std::vector<std::string>,std::vector<int>,std::vector<std::vector<int>>,std::vector<std::string>,std::vector<NumericMatrix>,std::vector<NumericMatrix>,std::vector<NumericMatrix>,std::vector<NumericMatrix>,List,List,List,std::vector<IntegerMatrix>,double,std::vector<std::vector<int>>,List,List,List,std::string,std::string,std::string,std::string,std::string,double,double,double,std::string,double,std::string,double,Nullable<List>,std::string,int,double,double,int,int,Nullable<List>,Nullable<List>,Nullable<List>,int,std::string,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _PoPS_RcppExport_registerCCallable() { 
    R_RegisterCCallable("PoPS", "_PoPS_pops_model_cpp", (DL_FUNC)_PoPS_pops_model_cpp_try);
    R_RegisterCCallable("PoPS", "_PoPS_RcppExport_validate", (DL_FUNC)_PoPS_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_PoPS_pops_model_cpp", (DL_FUNC) &_PoPS_pops_model_cpp, 54},
    {"_PoPS_RcppExport_registerCCallable", (DL_FUNC) &_PoPS_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_PoPS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
