// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_PoPS_RCPPEXPORTS_H_GEN_
#define RCPP_PoPS_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace PoPS {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("PoPS", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("PoPS", "_PoPS_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in PoPS");
            }
        }
    }

    inline List pops_model_cpp(int random_seed, bool multiple_random_seeds, std::vector<int> random_seeds, double lethal_temperature, int lethal_temperature_month, IntegerMatrix infected, IntegerMatrix total_exposed, std::vector<IntegerMatrix> exposed, IntegerMatrix susceptible, IntegerMatrix total_populations, IntegerMatrix total_hosts, std::vector<IntegerMatrix> mortality_tracker, IntegerMatrix mortality, IntegerMatrix quarantine_areas, std::string quarantine_directions, std::vector<NumericMatrix> treatment_maps, std::vector<std::string> treatment_dates, std::vector<int> pesticide_duration, IntegerMatrix resistant, std::vector<std::vector<int>> movements, std::vector<std::string> movements_dates, std::vector<NumericMatrix> temperature, std::vector<NumericMatrix> survival_rates, std::vector<NumericMatrix> weather_coefficient, std::vector<NumericMatrix> weather_coefficient_sd, List bbox, List res, List rows_cols, double reproductive_rate, std::vector<std::vector<int>> spatial_indices, List season_month_start_end, List frequency_config, List bool_config, double mortality_rate = 0.0, int mortality_time_lag = 2, std::string start_date = "2018-01-01", std::string end_date = "2018-12-31", std::string treatment_method = "ratio", std::string natural_kernel_type = "cauchy", std::string anthropogenic_kernel_type = "cauchy", double percent_natural_dispersal = 0.0, double natural_distance_scale = 21, double anthropogenic_distance_scale = 0.0, std::string natural_dir = "NONE", double natural_kappa = 0, std::string anthropogenic_dir = "NONE", double anthropogenic_kappa = 0, Nullable<List> frequencies_n_config = R_NilValue, std::string model_type_ = "SI", int latency_period = 0, double establishment_probability = 0, double dispersal_percentage = 0.99, int survival_rate_month = 0, int survival_rate_day = 0, Nullable<List> overpopulation_config = R_NilValue, Nullable<List> network_config = R_NilValue, Nullable<List> network_data_config = R_NilValue, int weather_size = 0, std::string weather_type = "deterministic", double dispersers_to_soils_percentage = 0) {
        typedef SEXP(*Ptr_pops_model_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_pops_model_cpp p_pops_model_cpp = NULL;
        if (p_pops_model_cpp == NULL) {
            validateSignature("List(*pops_model_cpp)(int,bool,std::vector<int>,double,int,IntegerMatrix,IntegerMatrix,std::vector<IntegerMatrix>,IntegerMatrix,IntegerMatrix,IntegerMatrix,std::vector<IntegerMatrix>,IntegerMatrix,IntegerMatrix,std::string,std::vector<NumericMatrix>,std::vector<std::string>,std::vector<int>,IntegerMatrix,std::vector<std::vector<int>>,std::vector<std::string>,std::vector<NumericMatrix>,std::vector<NumericMatrix>,std::vector<NumericMatrix>,std::vector<NumericMatrix>,List,List,List,double,std::vector<std::vector<int>>,List,List,List,double,int,std::string,std::string,std::string,std::string,std::string,double,double,double,std::string,double,std::string,double,Nullable<List>,std::string,int,double,double,int,int,Nullable<List>,Nullable<List>,Nullable<List>,int,std::string,double)");
            p_pops_model_cpp = (Ptr_pops_model_cpp)R_GetCCallable("PoPS", "_PoPS_pops_model_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_pops_model_cpp(Shield<SEXP>(Rcpp::wrap(random_seed)), Shield<SEXP>(Rcpp::wrap(multiple_random_seeds)), Shield<SEXP>(Rcpp::wrap(random_seeds)), Shield<SEXP>(Rcpp::wrap(lethal_temperature)), Shield<SEXP>(Rcpp::wrap(lethal_temperature_month)), Shield<SEXP>(Rcpp::wrap(infected)), Shield<SEXP>(Rcpp::wrap(total_exposed)), Shield<SEXP>(Rcpp::wrap(exposed)), Shield<SEXP>(Rcpp::wrap(susceptible)), Shield<SEXP>(Rcpp::wrap(total_populations)), Shield<SEXP>(Rcpp::wrap(total_hosts)), Shield<SEXP>(Rcpp::wrap(mortality_tracker)), Shield<SEXP>(Rcpp::wrap(mortality)), Shield<SEXP>(Rcpp::wrap(quarantine_areas)), Shield<SEXP>(Rcpp::wrap(quarantine_directions)), Shield<SEXP>(Rcpp::wrap(treatment_maps)), Shield<SEXP>(Rcpp::wrap(treatment_dates)), Shield<SEXP>(Rcpp::wrap(pesticide_duration)), Shield<SEXP>(Rcpp::wrap(resistant)), Shield<SEXP>(Rcpp::wrap(movements)), Shield<SEXP>(Rcpp::wrap(movements_dates)), Shield<SEXP>(Rcpp::wrap(temperature)), Shield<SEXP>(Rcpp::wrap(survival_rates)), Shield<SEXP>(Rcpp::wrap(weather_coefficient)), Shield<SEXP>(Rcpp::wrap(weather_coefficient_sd)), Shield<SEXP>(Rcpp::wrap(bbox)), Shield<SEXP>(Rcpp::wrap(res)), Shield<SEXP>(Rcpp::wrap(rows_cols)), Shield<SEXP>(Rcpp::wrap(reproductive_rate)), Shield<SEXP>(Rcpp::wrap(spatial_indices)), Shield<SEXP>(Rcpp::wrap(season_month_start_end)), Shield<SEXP>(Rcpp::wrap(frequency_config)), Shield<SEXP>(Rcpp::wrap(bool_config)), Shield<SEXP>(Rcpp::wrap(mortality_rate)), Shield<SEXP>(Rcpp::wrap(mortality_time_lag)), Shield<SEXP>(Rcpp::wrap(start_date)), Shield<SEXP>(Rcpp::wrap(end_date)), Shield<SEXP>(Rcpp::wrap(treatment_method)), Shield<SEXP>(Rcpp::wrap(natural_kernel_type)), Shield<SEXP>(Rcpp::wrap(anthropogenic_kernel_type)), Shield<SEXP>(Rcpp::wrap(percent_natural_dispersal)), Shield<SEXP>(Rcpp::wrap(natural_distance_scale)), Shield<SEXP>(Rcpp::wrap(anthropogenic_distance_scale)), Shield<SEXP>(Rcpp::wrap(natural_dir)), Shield<SEXP>(Rcpp::wrap(natural_kappa)), Shield<SEXP>(Rcpp::wrap(anthropogenic_dir)), Shield<SEXP>(Rcpp::wrap(anthropogenic_kappa)), Shield<SEXP>(Rcpp::wrap(frequencies_n_config)), Shield<SEXP>(Rcpp::wrap(model_type_)), Shield<SEXP>(Rcpp::wrap(latency_period)), Shield<SEXP>(Rcpp::wrap(establishment_probability)), Shield<SEXP>(Rcpp::wrap(dispersal_percentage)), Shield<SEXP>(Rcpp::wrap(survival_rate_month)), Shield<SEXP>(Rcpp::wrap(survival_rate_day)), Shield<SEXP>(Rcpp::wrap(overpopulation_config)), Shield<SEXP>(Rcpp::wrap(network_config)), Shield<SEXP>(Rcpp::wrap(network_data_config)), Shield<SEXP>(Rcpp::wrap(weather_size)), Shield<SEXP>(Rcpp::wrap(weather_type)), Shield<SEXP>(Rcpp::wrap(dispersers_to_soils_percentage)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_PoPS_RCPPEXPORTS_H_GEN_
